#include<stdio.h>
#include<conio.h>
#include<string.h>
#define red "\x1b[31m"
#define green "\x1b[32m"
#define gold "\x1b[33m"
#define white "\x1b[0m"
int pcheck(char *in)
{
int open=0,status=1,i,l,stat=0,j[10],k=-1,z;
for(i=0;in[i]!='\0';i++)
{
	if((in[i]=='{')||(in[i]=='('))
	       open++;
	else
	if((in[i]=='}')||(in[i]==')'))
		open--;
	else if(in[i]=='=')
	{
		if(open>0)
		{
			printf(gold" \n=");
			printf(white" sign is coming insite paranthesis which is not possible\nmay be closing paranthesis is misplaced\ncheck it first\n");
			stat=2;
		}
		if(in[i+1]=='=')
		{
			printf("two equalto sign cannot be together\n");
			for(z=0;in[z]!='\0';z++)
			{
			 if(z==i||z==i+1)
			 printf(red"%c",in[z]);
			 else printf(white"%c",in[z]);
			}
			status=0;
			stat=5;

		}
	}
	if(open<0)
	{
		j[++k]=i;
		stat=1;
	}
}
if(open==0&&(stat!=1 && stat!=2 && stat!=5))
{
printf("paranthesis are balanced\n");
}
else if(open==0 && stat==1)
{
	printf("closing paranthesis is placed befor its opening paranthesis in below expression\n");
	status=0;
	for(i=0;in[i]!='\0';i++)
	{
	for(l=0;l<=k;l++)
	{
		if(j[l]==i)
		{
			printf(gold"%c",in[i]);
			break;
		}
	}
	if(l>k)
	{
		printf(white"%c",in[i]);
	}
	}
	printf(white"\ncheck it first and re-enter\n:");
}
else{
status=0;
 if(open>0)
	{
		printf("%d CLOSING paranthes is MISSING in the expression below\n",open);
		for(i=0;in[i]!='\0';i++)
		{
		if((in[i]=='(')||(in[i]=='{'))
		      printf(red"%c",in[i]);
		else if((in[i]=='}')||(in[i]==')'))
			printf(green"%c",in[i]);
		      else printf(white"%c",in[i]);
		}
		printf(white"\ncheck it first and re-enter\n");
	}
	else {
	if(open<0)
	{
	 printf("%d CLOSING paranthes is EXTRA in the expression below\n",open*(-1));
	for(i=0;in[i]!='\0';i++)
		{
		if((in[i]=='(')||(in[i]=='{'))
		      printf(green"%c",in[i]);
		else if((in[i]=='}')||(in[i]==')'))
			printf(red"%c",in[i]);
		      else printf(white"%c",in[i]);
		}
		printf(white"\ncheck it first and re-enter\n");
	}
	}
	printf(":");
 }
 return status;
 }